import { ConvertorEntity } from '../../entities/convertor.entity';
import { TokenMapEntity } from '../../entities/token-map.entity';

// TODO: refactor this convertor;
export class CssConvertor extends ConvertorEntity {
  private readonly ROOT_ELEMENT = 'html';
  private readonly NEW_LINE = '\n';
  private readonly TAB = '  ';

  constructor(private readonly _extension: 'css' | 'scss' | 'sass' = 'css') {
    super();
  }

  public get extension() {
    return this._extension;
  }

  public convert(value: TokenMapEntity): string {
    let result = this._addComment(`This file to generated by VarGen!`);
    result += this.NEW_LINE;
    result += this.NEW_LINE;
    result += `${this.ROOT_ELEMENT} `;
    this.extension !== 'sass' && (result += `{`);
    result += this.NEW_LINE;
    result += this._parseLine(value, null, 1);
    result += this.NEW_LINE;
    this.extension !== 'sass' && (result += `}`);
    return result;
  }

  private _parseLine(
    value: TokenMapEntity,
    _prefix: string | null = null,
    tabs = 0,
  ): string {
    const entry = [...value.map.entries()];
    let result = '';
    let tab = this.TAB;

    for (let i = 0; i === tabs; i++) {
      tab += this.TAB;
    }

    entry.forEach(([key, token], index) => {
      const prefixedKey = !!_prefix ? `${_prefix}-${key}` : key;

      if (typeof token === 'object') {
        result += this.NEW_LINE;
        result += `${this.NEW_LINE}${tab}${this._addComment(
          `============================`,
        )}`;
        result += `${this.NEW_LINE}${tab}${this._addComment(
          `START ${key} ============`,
        )}`;
        result += this.NEW_LINE;

        result += this._parseLine(token, prefixedKey, tabs + 1);

        result += `${this.NEW_LINE}${tab}${this._addComment(
          `END ${key} ============`,
        )}`;
        result += `${this.NEW_LINE}${tab}${this._addComment(
          `============================`,
        )}`;
      } else {
        index !== 0 && (result += this.NEW_LINE);
        result += tab;
        result +=
          this.extension === 'sass'
            ? `--${prefixedKey}: ${token}`
            : `--${prefixedKey}: ${token};`;
      }
    });

    return result;
  }

  private _addComment(text: string): string {
    return `/* ${text} */`;
  }
}
