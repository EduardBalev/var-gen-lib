import { ConvertorEntity } from '../../domains/entities/convertor.entity';
import { TokenMapEntity } from '../../domains/entities/token-map.entity';

export class ConvertToCss extends ConvertorEntity {
  private readonly ROOT_ELEMENT = 'html';
  private readonly NEW_LINE = '\n';
  private readonly TAB = '  ';

  static readonly extension = 'css';

  public convert(value: TokenMapEntity): string {
    let result = this._addComment(`This file to generated by VarGen!`);
    result += this.NEW_LINE;
    result += this.NEW_LINE;
    result += `${this.ROOT_ELEMENT} {`;
    result += this.NEW_LINE;
    result += this._parseLine(value, null, 1);
    result += this.NEW_LINE;
    result += `}`;
    return result;
  }

  private _parseLine(value: TokenMapEntity, _prefix: string | null = null, tabs = 0): string {
    const entry = value.valueEntry;
    let result: string = '';
    let tab = this.TAB;

    for (let i = 0; i === tabs; i++) {
      tab += this.TAB;
    }

    entry.forEach(([key, token], index) => {
      const prefixedKey = !!_prefix ? `${_prefix}-${key}` : key;

      if (typeof token === 'object') {
        result += this.NEW_LINE;
        result += `${this.NEW_LINE}${tab}${this._addComment(`============================`)}`;
        result += `${this.NEW_LINE}${tab}${this._addComment(`START ${key} ============`)}`;
        result += this.NEW_LINE;

        result += this._parseLine(token, prefixedKey, tabs + 1);

        result += `${this.NEW_LINE}${tab}${this._addComment(`END ${key} ============`)}`;
        result += `${this.NEW_LINE}${tab}${this._addComment(`============================`)}`;
      } else {
        index !== 0 && (result += this.NEW_LINE);
        result += tab;
        result += `--${prefixedKey}: ${token};`;
      }
    });

    return result;
  }

  private _addComment(text: string): string {
    return `/* ${text} */`;
  }
}
